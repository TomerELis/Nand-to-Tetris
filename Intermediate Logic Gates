/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
// Handling zx
    Mux16(a=x, b=false, sel=zx, out=xZeroed); // Zero x if zx is 1

    // Handling nx
    Not16(in=xZeroed, out=xNegated);
    Mux16(a=xZeroed, b=xNegated, sel=nx, out=xFinal); // Negate x if nx is 1

    // Handling zy
    Mux16(a=y, b=false, sel=zy, out=yZeroed); // Zero y if zy is 1

    // Handling ny
    Not16(in=yZeroed, out=yNegated);
    Mux16(a=yZeroed, b=yNegated, sel=ny, out=yFinal); // Negate y if ny is 1

    // Handling f (function: Add or And)
    Add16(a=xFinal, b=yFinal, out=outAdd);   // x + y
    And16(a=xFinal, b=yFinal, out=outAnd);   // x & y
    Mux16(a=outAnd, b=outAdd, sel=f, out=outSelected); // Choose addition or and based on f

    // Handling no (negate output)
    Not16(in=outSelected, out=outNegated);
    Mux16(a=outSelected, b=outNegated, sel=no, out=out); // Negate output if no is 1

      // Compute zr (zero flag)
   //Or8Way(in=out[0..7], out=zrLow);
    //Or8Way(in=out[8..15], out=zrHigh);
    //Or(a=zrLow, b=zrHigh, out=zrTemp);
    //Not(in=zrTemp, out=zr); // zr is 1 if out is zero

    // Compute ng (negative flag)
    //And(a=out[15], b=true, out=ng); // ng is 1 if the most significant bit of out is 1

}



















/**
 * 16-bit adder: Adds two 16-bit two's complement values.
 * The most significant carry bit is ignored.
 */
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    HalfAdder(a=a[0] , b=b[0] , sum=out[0] , carry=c1 );
    FullAdder(a=a[1] , b=b[1] , c=c1 , sum=out[1] , carry=c2 );
    FullAdder(a=a[2] , b=b[2] , c=c2 , sum=out[2] , carry=c3 );
    FullAdder(a=a[3] , b=b[3] , c=c3 , sum=out[3] , carry=c4 );
    FullAdder(a=a[4] , b=b[4] , c=c4 , sum=out[4] , carry=c5 );
    FullAdder(a=a[5] , b=b[5] , c=c5 , sum=out[5] , carry=c6 );
    FullAdder(a=a[6] , b=b[6] , c=c6 , sum=out[6] , carry=c7 );
    FullAdder(a=a[7] , b=b[7] , c=c7 , sum=out[7] , carry=c8 );
    FullAdder(a=a[8] , b=b[8] , c=c8 , sum=out[8] , carry=c9 );
    FullAdder(a=a[9] , b=b[9] , c=c9 , sum=out[9] , carry=c10 );
    FullAdder(a=a[10] , b=b[10] , c=c10 , sum=out[10] , carry=c11 );
    FullAdder(a=a[11] , b=b[11] , c=c11 , sum=out[11] , carry=c12 );
    FullAdder(a=a[12] , b=b[12] , c=c12 , sum=out[12] , carry=c13 );
    FullAdder(a=a[13] , b=b[13] , c=c13 , sum=out[13] , carry=c14 );
    FullAdder(a=a[14] , b=b[14] , c=c14 , sum=out[14] , carry=c15 );
    FullAdder(a=a[15] , b=b[15] , c=c15 , sum=out[15] , carry=c16 );
    
}









/**
 * Computes the sum of three bits.
 */
CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    And(a= a, b= b, out=ab );
    And(a=ab , b=c , out=val3 );
    And(a= b, b= c, out=bc );
    And(a= NOTb, b= NOTc, out=NOTbc );
    Not(in=b , out=NOTb );
    And(a=NOTa , b=NOTb , out=NOTab );
    Not(in= c, out=NOTc );
    Not(in= a, out=NOTa );
    And(a= b, b=NOTa , out=bNOTa );
    And(a= a, b=NOTbc , out=val1 );
    And(a= NOTab, b=c , out=val2 );
    And(a= bNOTa, b= NOTc, out=val4 );

    Or(a=val1 , b=val2 , out=val12 );
    Or(a=val12 , b=val3 , out=val123 );
    Or(a= val123, b= val4, out=sum );

    And(a= a, b= c, out=ac );
    Or(a= bc, b= ac, out=bcORac );
    Or(a= bcORac, b= ab, out=carry );

}

